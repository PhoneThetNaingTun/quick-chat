// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  sentRequests     FriendRequest[] @relation("Sender")
  receivedRequests FriendRequest[] @relation("Receiver")
  Account          Account[]
  Chat             Chat[]
  friends          Friend[]        @relation("UserFriends")
  friendOf         Friend[]        @relation("FriendUsers")
  Message          Message[]

  @@map("users")
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)
}

model Chat {
  id         String   @id @default(cuid())
  userId     String
  chatRoomId String
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  User     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ChatRoom ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  Message  Message[]
}

model Message {
  id       String @id @default(cuid())
  senderId String
  chatId   String
  message  String
  Chat     Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  User     User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id         String   @id @default(cuid())
  name       String?
  isGroup    Boolean  @default(false)
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt
  Chat       Chat[]
}
